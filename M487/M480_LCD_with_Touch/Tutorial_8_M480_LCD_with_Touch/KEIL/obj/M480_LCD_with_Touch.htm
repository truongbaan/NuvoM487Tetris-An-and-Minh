<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\M480_LCD_with_Touch.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\M480_LCD_with_Touch.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sat May 24 17:27:01 2025
<BR><P>
<H3>Maximum Stack Usage =        316 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; gameplay &rArr; drawScoreScreen &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[8]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">PendSV_Handler</a><BR>
 <LI><a href="#[9]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SysTick_Handler</a><BR>
 <LI><a href="#[f]">Default_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">Default_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ACMP01_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[a]">BOD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[54]">BPWM0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[55]">BPWM1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[22]">BRAKE0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[26]">BRAKE1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[41]">CAN0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[42]">CAN1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[69]">CAN2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[57]">CCAP_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[e]">CKFAIL_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[73]">CLK_EnableModuleClock</a> from clk.o(.text.CLK_EnableModuleClock) referenced from main.o(.text.SYS_Init)
 <LI><a href="#[72]">CLK_SetModuleClock</a> from clk.o(.text.CLK_SetModuleClock) referenced from main.o(.text.SYS_Init)
 <LI><a href="#[71]">CLK_SysTickDelay</a> from ebi_lcd_module.o(.text.CLK_SysTickDelay) referenced from ebi_lcd_module.o(.text.ILI9341_Initial)
 <LI><a href="#[4d]">CRYPTO_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[33]">DAC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[f]">Default_Handler</a> from startup_m480.o(.text) referenced 14 times from startup_m480.o(RESET)
 <LI><a href="#[34]">EADC00_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[35]">EADC01_IRQHandler</a> from ebi_lcd_module.o(.text.EADC01_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[37]">EADC02_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[38]">EADC03_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[65]">EADC10_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[66]">EADC11_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[67]">EADC12_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[68]">EADC13_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5b]">ECAP0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5c]">ECAP1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[60]">EHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[14]">EINT0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[15]">EINT1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[16]">EINT2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[17]">EINT3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[18]">EINT4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[19]">EINT5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4f]">EINT6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5e]">EINT7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4a]">EMAC_RX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[49]">EMAC_TX_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[23]">EPWM0P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[24]">EPWM0P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[25]">EPWM0P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[27]">EPWM1P0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[28]">EPWM1P1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[29]">EPWM1P2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1a]">GPA_IRQHandler</a> from main.o(.text.GPA_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[1b]">GPB_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1c]">GPC_IRQHandler</a> from main.o(.text.GPC_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[1d]">GPD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1e]">GPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1f]">GPF_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4e]">GPG_IRQHandler</a> from main.o(.text.GPG_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[5d]">GPH_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6e]">GPIO_EnableInt</a> from gpio.o(.text.GPIO_EnableInt) referenced from main.o(.text.GPIO_Init)
 <LI><a href="#[6f]">GPIO_SetMode</a> from gpio.o(.text.GPIO_SetMode) referenced from ebi_lcd_module.o(.text.Get_TP_Y)
 <LI><a href="#[6f]">GPIO_SetMode</a> from gpio.o(.text.GPIO_SetMode) referenced from main.o(.text.SYS_Init)
 <LI><a href="#[2]">HardFault_Handler</a> from main.o(.text.HardFault_Handler) referenced from startup_m480.o(RESET)
 <LI><a href="#[30]">I2C0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[31]">I2C1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[58]">I2C2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4b]">I2S0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[b]">IRC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3f]">OHCI_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[4c]">OPA0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[32]">PDMA_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[c]">PWRWU_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6d]">ProcessHardFault</a> from retarget.o(.text.ProcessHardFault) referenced from startup_m480.o(.text)
 <LI><a href="#[59]">QEI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5a]">QEI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[20]">QSPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3b]">QSPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[d]">RAMPE_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[43]">SC0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[44]">SC1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[45]">SC2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[47]">SDH0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5f]">SDH1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[21]">SPI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3c]">SPI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3d]">SPI2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[46]">SPI3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[56]">SPIM_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[6b]">SystemInit</a> from system_m480.o(.text.SystemInit) referenced from startup_m480.o(.text)
 <LI><a href="#[11]">TAMPER_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2a]">TMR0_IRQHandler</a> from main.o(.text.TMR0_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[2b]">TMR1_IRQHandler</a> from main.o(.text.TMR1_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[2c]">TMR2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2d]">TMR3_IRQHandler</a> from ebi_lcd_module.o(.text.TMR3_IRQHandler) referenced from startup_m480.o(RESET)
 <LI><a href="#[62]">TRNG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2e]">UART0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[2f]">UART1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[39]">UART2_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3a]">UART3_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[50]">UART4_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[51]">UART5_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[63]">UART6_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[64]">UART7_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[48]">USBD20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[3e]">USBD_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[61]">USBOTG20_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[40]">USBOTG_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[52]">USCI0_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[53]">USCI1_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[12]">WDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[13]">WWDT_IRQHandler</a> from startup_m480.o(.text) referenced from startup_m480.o(RESET)
 <LI><a href="#[70]">__2printf</a> from printf8.o(i.__0printf$8) referenced from main.o(.text.HardFault_HandlerC)
 <LI><a href="#[70]">__2printf</a> from printf8.o(i.__0printf$8) referenced from main.o(.text.main)
 <LI><a href="#[6c]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_m480.o(.text)
 <LI><a href="#[76]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[75]">fputc</a> from retarget.o(.text.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[6a]">main</a> from main.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[74]">puts</a> from puts.o(i.puts) referenced from main.o(.text.main)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6c]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[d9]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[77]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[84]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[da]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[db]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[dc]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[dd]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[de]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ACMP01_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>BOD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>BPWM0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>BPWM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>BRAKE0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>BRAKE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CAN0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>CAN1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>CAN2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>CCAP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>CKFAIL_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>EADC00_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EADC02_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EADC03_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>EADC10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>EADC11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>EADC12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>EADC13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>ECAP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>ECAP1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>EHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EINT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EINT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EINT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EINT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EINT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EINT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EINT6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EINT7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>EMAC_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>EMAC_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EPWM0P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EPWM0P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EPWM0P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EPWM1P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EPWM1P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EPWM1P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>GPB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>GPD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>GPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>GPF_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>GPH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2S0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>IRC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>OHCI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>OPA0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>PDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>PWRWU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>QEI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>QEI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>QSPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>QSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RAMPE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SDH0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDH1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>SPIM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TMR2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TRNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>UART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>UART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>UART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>USBD20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>USBOTG20_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USBOTG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>USCI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>USCI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>WDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>WWDT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[df]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[d3]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_Y
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_X
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_Y
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_X
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_Y
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_X
</UL>

<P><STRONG><a name="[82]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e2]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[e3]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[7f]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>

<P><STRONG><a name="[78]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[e4]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[e5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[73]"></a>CLK_EnableModuleClock</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableModuleClock))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.SYS_Init)
</UL>
<P><STRONG><a name="[85]"></a>CLK_EnablePLL</STRONG> (Thumb, 340 bytes, Stack size 56 bytes, clk.o(.text.CLK_EnablePLL))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
</UL>

<P><STRONG><a name="[ab]"></a>CLK_EnableXtalRC</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, clk.o(.text.CLK_EnableXtalRC))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[88]"></a>CLK_GetCPUFreq</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetCPUFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetCPUFreq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cf]"></a>CLK_GetHXTFreq</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, clk.o(.text.CLK_GetHXTFreq))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8a]"></a>CLK_GetPCLK0Freq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetPCLK0Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetPCLK0Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[8b]"></a>CLK_GetPCLK1Freq</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, clk.o(.text.CLK_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>

<P><STRONG><a name="[87]"></a>CLK_GetPLLClockFreq</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, clk.o(.text.CLK_GetPLLClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>

<P><STRONG><a name="[8c]"></a>CLK_SetCoreClock</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, clk.o(.text.CLK_SetCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[8d]"></a>CLK_SetHCLK</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, clk.o(.text.CLK_SetHCLK))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CLK_SetHCLK &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[72]"></a>CLK_SetModuleClock</STRONG> (Thumb, 136 bytes, Stack size 20 bytes, clk.o(.text.CLK_SetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CLK_SetModuleClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.SYS_Init)
</UL>
<P><STRONG><a name="[86]"></a>CLK_WaitClockReady</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, clk.o(.text.CLK_WaitClockReady))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CLK_WaitClockReady
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnablePLL
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
</UL>

<P><STRONG><a name="[35]"></a>EADC01_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.EADC01_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>EADC_ConfigSampleModule</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, eadc.o(.text.EADC_ConfigSampleModule))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EADC_ConfigSampleModule
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_Y
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_X
</UL>

<P><STRONG><a name="[d1]"></a>EADC_Open</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, eadc.o(.text.EADC_Open))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d0]"></a>EBI_Open</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, ebi.o(.text.EBI_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EBI_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1a]"></a>GPA_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.GPA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPA_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>GPC_IRQHandler</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text.GPC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPC_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>GPG_IRQHandler</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, main.o(.text.GPG_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPG_IRQHandler &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIO_EnableInt</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, gpio.o(.text.GPIO_EnableInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_EnableInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.GPIO_Init)
</UL>
<P><STRONG><a name="[90]"></a>GPIO_Init</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, main.o(.text.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_7
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>GPIO_SetMode</STRONG> (Thumb, 42 bytes, Stack size 20 bytes, gpio.o(.text.GPIO_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_SetMode
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.SYS_Init)
<LI> ebi_lcd_module.o(.text.Get_TP_Y)
</UL>
<P><STRONG><a name="[93]"></a>Get_TP_X</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ebi_lcd_module.o(.text.Get_TP_X))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_TP_X &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[94]"></a>Get_TP_Y</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ebi_lcd_module.o(.text.Get_TP_Y))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Get_TP_Y &rArr; __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, main.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_Handler &rArr; HardFault_HandlerC &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[95]"></a>HardFault_HandlerC</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text.HardFault_HandlerC))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HardFault_HandlerC &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[96]"></a>ILI9341_Initial</STRONG> (Thumb, 472 bytes, Stack size 40 bytes, ebi_lcd_module.o(.text.ILI9341_Initial))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI9341_Initial &rArr; puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[97]"></a>LCD_BlankArea</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ebi_lcd_module.o(.text.LCD_BlankArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_BlankArea &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>

<P><STRONG><a name="[99]"></a>LCD_DrawBlock</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, ebi_lcd_module.o(.text.LCD_DrawBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LCD_DrawBlock &rArr; LCD_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGameBackground
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNextPiece
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBoard
</UL>

<P><STRONG><a name="[9b]"></a>LCD_DrawGameBackground</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, ebi_lcd_module.o(.text.LCD_DrawGameBackground))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_DrawGameBackground &rArr; LCD_DrawBlock &rArr; LCD_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[9a]"></a>LCD_DrawPixel</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, ebi_lcd_module.o(.text.LCD_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBlock
</UL>

<P><STRONG><a name="[9c]"></a>LCD_DrawRGB565Image</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, ebi_lcd_module.o(.text.LCD_DrawRGB565Image))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LCD_DrawRGB565Image &rArr; OUTLINED_FUNCTION_0 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9e]"></a>LCD_DrawRectangle</STRONG> (Thumb, 148 bytes, Stack size 40 bytes, ebi_lcd_module.o(.text.LCD_DrawRectangle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = LCD_DrawRectangle &rArr; LCD_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
</UL>

<P><STRONG><a name="[9f]"></a>LCD_PutChar8x16</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, ebi_lcd_module.o(.text.LCD_PutChar8x16))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>

<P><STRONG><a name="[a1]"></a>LCD_PutString</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, ebi_lcd_module.o(.text.LCD_PutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutChar8x16
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawUnpause
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPause
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTime
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNextPiece
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>

<P><STRONG><a name="[98]"></a>LCD_SetWindow</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, ebi_lcd_module.o(.text.LCD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawPixel
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlankArea
</UL>

<P><STRONG><a name="[6d]"></a>ProcessHardFault</STRONG> (Thumb, 216 bytes, Stack size 40 bytes, retarget.o(.text.ProcessHardFault))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ProcessHardFault &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[aa]"></a>SYS_Init</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, main.o(.text.SYS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SYS_Init &rArr; CLK_SetCoreClock &rArr; CLK_EnablePLL &rArr; CLK_WaitClockReady
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetCoreClock
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_WaitClockReady
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_EnableXtalRC
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bd]"></a>SendChar_ToUART</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, retarget.o(.text.SendChar_ToUART))
<BR><BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[89]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_m480.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SetHCLK
</UL>

<P><STRONG><a name="[6b]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, system_m480.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(.text)
</UL>
<P><STRONG><a name="[ac]"></a>TIMER_GetModuleClock</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, timer.o(.text.TIMER_GetModuleClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK1Freq
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPCLK0Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>

<P><STRONG><a name="[ad]"></a>TIMER_Open</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, timer.o(.text.TIMER_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_GetModuleClock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
</UL>

<P><STRONG><a name="[2a]"></a>TMR0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, main.o(.text.TMR0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TMR1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.TMR1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TMR3_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.TMR3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>Timer0_Init</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, main.o(.text.Timer0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Timer0_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[af]"></a>Timer1_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, main.o(.text.Timer1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Timer1_Init &rArr; TIMER_Open &rArr; TIMER_GetModuleClock &rArr; CLK_GetPCLK1Freq &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMER_Open
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d2]"></a>Timer3_Init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.Timer3_Init))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b0]"></a>UART_Open</STRONG> (Thumb, 276 bytes, Stack size 40 bytes, uart.o(.text.UART_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_Open
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetPLLClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a5]"></a>canMove</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, main.o(.text.canMove))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = canMove
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotatePiece
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceDown
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>

<P><STRONG><a name="[c7]"></a>computeDropDistance</STRONG> (Thumb, 120 bytes, Stack size 28 bytes, main.o(.text.computeDropDistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = computeDropDistance
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardDrop
</UL>

<P><STRONG><a name="[bf]"></a>createBoard</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, main.o(.text.createBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = createBoard
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b1]"></a>drawGameOver</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, main.o(.text.drawGameOver))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = drawGameOver &rArr; OUTLINED_FUNCTION_9 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlankArea
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_9
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b3]"></a>drawGameScore</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(.text.drawGameScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = drawGameScore &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b4]"></a>drawLevel</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(.text.drawLevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = drawLevel &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b5]"></a>drawNextPiece</STRONG> (Thumb, 232 bytes, Stack size 24 bytes, main.o(.text.drawNextPiece))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = drawNextPiece &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBlock
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_2
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b7]"></a>drawPause</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.drawPause))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = drawPause &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[b8]"></a>drawScoreScreen</STRONG> (Thumb, 268 bytes, Stack size 48 bytes, main.o(.text.drawScoreScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = drawScoreScreen &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlankArea
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insertScore
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBlock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[ba]"></a>drawTime</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, main.o(.text.drawTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = drawTime &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[bb]"></a>drawTopScore</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, main.o(.text.drawTopScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = drawTopScore &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_1
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[bc]"></a>drawUnpause</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, main.o(.text.drawUnpause))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = drawUnpause &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[75]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, retarget.o(.text.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendChar_ToUART
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[be]"></a>gameplay</STRONG> (Thumb, 500 bytes, Stack size 88 bytes, main.o(.text.gameplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = gameplay &rArr; drawScoreScreen &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGameBackground
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawUnpause
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawPause
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTime
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLevel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTopScore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameScore
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNextPiece
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isGameOver
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;removeLines
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceDown
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMove
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printBoard
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;createBoard
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c6]"></a>hardDrop</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, main.o(.text.hardDrop))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = hardDrop &rArr; computeDropDistance
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;computeDropDistance
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[b9]"></a>insertScore</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, main.o(.text.insertScore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = insertScore
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
</UL>

<P><STRONG><a name="[c0]"></a>isGameOver</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, main.o(.text.isGameOver))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[c2]"></a>key_input</STRONG> (Thumb, 236 bytes, Stack size 40 bytes, main.o(.text.key_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = key_input &rArr; hardDrop &rArr; computeDropDistance
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardDrop
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rotatePiece
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceRight
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceLeft
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceDown
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_4
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_10
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[6a]"></a>main</STRONG> (Thumb, 396 bytes, Stack size 88 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = main &rArr; gameplay &rArr; drawScoreScreen &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_Y
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_TP_X
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGB565Image
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer3_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_Open
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Initial
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EBI_Open
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetCPUFreq
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_GetHXTFreq
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Open
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawGameBackground
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRectangle
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlankArea
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer1_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer0_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYS_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CLK_SysTickDelay
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_6
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[c4]"></a>movePieceDown</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, main.o(.text.movePieceDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = movePieceDown &rArr; canMove
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMove
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_3
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[cb]"></a>movePieceLeft</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text.movePieceLeft))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = movePieceLeft &rArr; OUTLINED_FUNCTION_5 &rArr; canMove
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[cd]"></a>movePieceRight</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, main.o(.text.movePieceRight))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = movePieceRight &rArr; OUTLINED_FUNCTION_5 &rArr; canMove
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_5
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[c1]"></a>printBoard</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, main.o(.text.printBoard))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = printBoard &rArr; LCD_DrawBlock &rArr; LCD_DrawPixel &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawBlock
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[c5]"></a>removeLines</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, main.o(.text.removeLines))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = removeLines
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[cc]"></a>rotatePiece</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(.text.rotatePiece))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rotatePiece &rArr; canMove
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMove
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[d4]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e6]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[70]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>
<BR>[Address Reference Count : 2]<UL><LI> main.o(.text.HardFault_HandlerC)
<LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[d6]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[e7]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[a7]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTime
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OUTLINED_FUNCTION_8
</UL>

<P><STRONG><a name="[e8]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[e9]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[ea]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ce]"></a>putchar</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, putchar.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = putchar &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[74]"></a>puts</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, puts.o(i.puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = puts &rArr; fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Initial
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_HandlerC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPG_IRQHandler
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPA_IRQHandler
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPC_IRQHandler
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL><P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[f]"></a>Default_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_m480.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Default_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_m480.o(RESET)
</UL>
<P><STRONG><a name="[c8]"></a>OUTLINED_FUNCTION_3</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_3))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardDrop
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceDown
</UL>

<P><STRONG><a name="[a4]"></a>OUTLINED_FUNCTION_5</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_5))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_5 &rArr; canMove
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canMove
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceRight
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;movePieceLeft
</UL>

<P><STRONG><a name="[c9]"></a>OUTLINED_FUNCTION_10</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_10))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[ca]"></a>OUTLINED_FUNCTION_4</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_4))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_input
</UL>

<P><STRONG><a name="[a2]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; LCD_BlankArea &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_BlankArea
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
</UL>

<P><STRONG><a name="[b2]"></a>OUTLINED_FUNCTION_6</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_6))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawScoreScreen
</UL>

<P><STRONG><a name="[b6]"></a>OUTLINED_FUNCTION_2</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_2))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawNextPiece
</UL>

<P><STRONG><a name="[a3]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLevel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTopScore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameScore
</UL>

<P><STRONG><a name="[a6]"></a>OUTLINED_FUNCTION_8</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OUTLINED_FUNCTION_8 &rArr; __2sprintf
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawLevel
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawTopScore
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameScore
</UL>

<P><STRONG><a name="[a8]"></a>OUTLINED_FUNCTION_9</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_9))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = OUTLINED_FUNCTION_9 &rArr; LCD_PutString &rArr; LCD_PutChar8x16 &rArr; OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutString
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;drawGameOver
</UL>

<P><STRONG><a name="[c3]"></a>CLK_SysTickDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, main.o(.text.CLK_SysTickDelay))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gameplay
</UL>

<P><STRONG><a name="[91]"></a>OUTLINED_FUNCTION_7</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, main.o(.text.OUTLINED_FUNCTION_7))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>

<P><STRONG><a name="[71]"></a>CLK_SysTickDelay</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.CLK_SysTickDelay))
<BR>[Address Reference Count : 1]<UL><LI> ebi_lcd_module.o(.text.ILI9341_Initial)
</UL>
<P><STRONG><a name="[a0]"></a>OUTLINED_FUNCTION_1</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.OUTLINED_FUNCTION_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_1 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_PutChar8x16
</UL>

<P><STRONG><a name="[9d]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, ebi_lcd_module.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = OUTLINED_FUNCTION_0 &rArr; LCD_SetWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawRGB565Image
</UL>

<P><STRONG><a name="[a9]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, retarget.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProcessHardFault
</UL>

<P><STRONG><a name="[92]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, gpio.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetMode
</UL>

<P><STRONG><a name="[8f]"></a>OUTLINED_FUNCTION_0</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, eadc.o(.text.OUTLINED_FUNCTION_0))
<BR><BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EADC_ConfigSampleModule
</UL>

<P><STRONG><a name="[d5]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[d8]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[d7]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[76]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
